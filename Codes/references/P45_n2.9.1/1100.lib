//************************************************************************
// #   #  ###  #  # #     #     #  #  ###   ###
// ##  # #   # # #  #    ##    ## ## #   # #   #
// # # # #   # ##   #   # #     #  # #   # #   #
// #  ## #   # # #  #  ####     #  # #   # #   #
// #   #  ###  #  # # #   #     #  #  ###   ###
//
//AVR Interface for NOIA 1100 LCD
//Based on source from http://sunbizhosting.com/~spiral/
// —à—Ä–∏—Ñ—Ç 24x32 –Ω–∞—Ä–∏—Å–æ–≤–∞–ª –°–¢–ê–°


//    –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥ –ø–æ–¥–ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–æ–¥–µ—Ä–∞

// 3410=1100 - 96 —Ö 65

//************************************************************************

#include "1100.h"
#include <delay.h>
#include <stdio.h>
#include "mega168a_bdef.h"
#include "mega168a.h"
//#include "macros.h"
#define _LCD_LATCH     PORTD.5

//unsigned char buff[7][96];  // ++++++++   // 8 –Ω–µ —É–±–∏—Ä–∞–µ—Ç—Å—è –≤ –ø–∞–º—è—Ç—å RAM –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ –ø—Ä–æ–µ–∫—Ç–∞
//unsigned char buff[8][96];  // ++++++++
unsigned char posx, posy;  // ++++++++


char bitaddr;
// lookup table, here you can modify the font
static const unsigned char FontLookup[117][5]={
{0x00, 0x00, 0x00, 0x00, 0x00},// (space)
{0x00, 0x00, 0x5F, 0x00, 0x00},// ! 33
{0x00, 0x07, 0x00, 0x07, 0x00},// "
{0x14, 0x7F, 0x14, 0x7F, 0x14},// #
{0x24, 0x2A, 0x7F, 0x2A, 0x12},// $
{0x23, 0x13, 0x08, 0x64, 0x62},// %
{0x36, 0x49, 0x55, 0x22, 0x50},// &
{0x00, 0x05, 0x03, 0x00, 0x00},// '
{0x00, 0x1C, 0x22, 0x41, 0x00},// (
{0x00, 0x41, 0x22, 0x1C, 0x00},// )
{0x08, 0x2A, 0x1C, 0x2A, 0x08},// *
{0x08, 0x08, 0x3E, 0x08, 0x08},// +
{0x00, 0x50, 0x30, 0x00, 0x00},// ,
{0x08, 0x08, 0x08, 0x08, 0x08},// -
{0x00, 0x30, 0x30, 0x00, 0x00},// .
{0x20, 0x10, 0x08, 0x04, 0x02},// /
{0x3E, 0x51, 0x49, 0x45, 0x3E},// 0 48
{0x00, 0x42, 0x7F, 0x40, 0x00},// 1
{0x42, 0x61, 0x51, 0x49, 0x46},// 2
{0x21, 0x41, 0x45, 0x4B, 0x31},// 3
{0x18, 0x14, 0x12, 0x7F, 0x10},// 4
{0x27, 0x45, 0x45, 0x45, 0x39},// 5
{0x3C, 0x4A, 0x49, 0x49, 0x30},// 6
{0x01, 0x71, 0x09, 0x05, 0x03},// 7
{0x36, 0x49, 0x49, 0x49, 0x36},// 8
{0x06, 0x49, 0x49, 0x29, 0x1E},// 9
{0x00, 0x36, 0x36, 0x00, 0x00},// :
{0x00, 0x56, 0x36, 0x00, 0x00},// ;
{0x00, 0x08, 0x14, 0x22, 0x41},// <
{0x14, 0x14, 0x14, 0x14, 0x14},// =
{0x41, 0x22, 0x14, 0x08, 0x00},// >
{0x02, 0x01, 0x51, 0x09, 0x06},// ?
{0x32, 0x49, 0x79, 0x41, 0x3E},// @
{0x7E, 0x11, 0x11, 0x11, 0x7E},// A 65
{0x7F, 0x49, 0x49, 0x49, 0x36},// B
{0x3E, 0x41, 0x41, 0x41, 0x22},// C
{0x7F, 0x41, 0x41, 0x22, 0x1C},// D
{0x7F, 0x49, 0x49, 0x49, 0x41},// E
{0x7F, 0x09, 0x09, 0x01, 0x01},// F
{0x3E, 0x41, 0x41, 0x51, 0x32},// G
{0x7F, 0x08, 0x08, 0x08, 0x7F},// H
{0x00, 0x41, 0x7F, 0x41, 0x00},// I
{0x20, 0x40, 0x41, 0x3F, 0x01},// J
{0x7F, 0x08, 0x14, 0x22, 0x41},// K
{0x7F, 0x40, 0x40, 0x40, 0x40},// L
{0x7F, 0x02, 0x04, 0x02, 0x7F},// M
{0x7F, 0x04, 0x08, 0x10, 0x7F},// N
{0x3E, 0x41, 0x41, 0x41, 0x3E},// O
{0x7F, 0x09, 0x09, 0x09, 0x06},// P
{0x3E, 0x41, 0x51, 0x21, 0x5E},// Q
{0x7F, 0x09, 0x19, 0x29, 0x46},// R
{0x46, 0x49, 0x49, 0x49, 0x31},// S
{0x01, 0x01, 0x7F, 0x01, 0x01},// T
{0x3F, 0x40, 0x40, 0x40, 0x3F},// U
{0x1F, 0x20, 0x40, 0x20, 0x1F},// V
{0x7F, 0x20, 0x18, 0x20, 0x7F},// W
{0x63, 0x14, 0x08, 0x14, 0x63},// X
{0x03, 0x04, 0x78, 0x04, 0x03},// Y
{0x61, 0x51, 0x49, 0x45, 0x43},// Z
{0x00, 0x00, 0x7F, 0x41, 0x41},// [
{0x02, 0x04, 0x08, 0x10, 0x20},// "\"
{0x41, 0x41, 0x7F, 0x00, 0x00},// ]
{0x04, 0x02, 0x01, 0x02, 0x04},// ^
{0x40, 0x40, 0x40, 0x40, 0x40},// _  95
{0x00, 0x01, 0x02, 0x04, 0x00},// `
{0x20, 0x54, 0x54, 0x54, 0x78},// a
{0x7F, 0x48, 0x44, 0x44, 0x38},// b
{0x38, 0x44, 0x44, 0x44, 0x20},// c
{0x38, 0x44, 0x44, 0x48, 0x7F},// d
{0x38, 0x54, 0x54, 0x54, 0x18},// e
{0x08, 0x7E, 0x09, 0x01, 0x02},// f
{0x08, 0x14, 0x54, 0x54, 0x3C},// g
{0x7F, 0x08, 0x04, 0x04, 0x78},// h
{0x00, 0x44, 0x7D, 0x40, 0x00},// i
{0x20, 0x40, 0x44, 0x3D, 0x00},// j
{0x00, 0x7F, 0x10, 0x28, 0x44},// k
{0x00, 0x41, 0x7F, 0x40, 0x00},// l
{0x7C, 0x04, 0x18, 0x04, 0x78},// m
{0x7C, 0x08, 0x04, 0x04, 0x78},// n
{0x38, 0x44, 0x44, 0x44, 0x38},// o
{0x7C, 0x14, 0x14, 0x14, 0x08},// p
{0x08, 0x14, 0x14, 0x18, 0x7C},// q
{0x7C, 0x08, 0x04, 0x04, 0x08},// r
{0x48, 0x54, 0x54, 0x54, 0x20},// s
{0x04, 0x3F, 0x44, 0x40, 0x20},// t
{0x3C, 0x40, 0x40, 0x20, 0x7C},// u
{0x1C, 0x20, 0x40, 0x20, 0x1C},// v
{0x3C, 0x40, 0x30, 0x40, 0x3C},// w
{0x44, 0x28, 0x10, 0x28, 0x44},// x
{0x0C, 0x50, 0x50, 0x50, 0x3C},// y
{0x44, 0x64, 0x54, 0x4C, 0x44},// z
{0x00, 0x08, 0x36, 0x41, 0x00},// {
{0x00, 0x00, 0x7F, 0x00, 0x00},// |
{0x00, 0x41, 0x36, 0x08, 0x00},// }
{0x08, 0x08, 0x2A, 0x1C, 0x08},// ->
{0x08, 0x1C, 0x2A, 0x08, 0x08}, // <- 127
{0x40, 0x40, 0x40, 0x40, 0x40 },
{ 0x60, 0x60, 0x60, 0x60, 0x60 },
{ 0x70, 0x70, 0x70, 0x70, 0x70 },
{ 0x78, 0x78, 0x78, 0x78, 0x78 },
{ 0x7C, 0x7C, 0x7C, 0x7C, 0x7C },
{ 0x7E, 0x7E, 0x7E, 0x7E, 0x7E },
{ 0x7F, 0x7F, 0x7F, 0x7F, 0x7F }, //134
{ 0x40, 0x00, 0x40, 0x00, 0x40 }, //ÚÓ˜ÍË ._._.
{ 0x7F, 0x00, 0x40, 0x00, 0x40 }, //‚ÂÚ.˜ÂÚ‡ Ë ‰‚Â ÚÓ˜ÍË
{ 0x7F, 0x00, 0x7F, 0x00, 0x40 }, //‰‚Â ‚ÂÚ.˜ÂÚ˚ + ÚÓ˜Í‡
{ 0x7F, 0x00, 0x7F, 0x00, 0x7F },//ÚË ‚ÂÚ.˜ÂÚ˚

        { 0x3F, 0x21, 0x21, 0x21, 0x21 },//batt 139
	{ 0x3F, 0x3F, 0x21, 0x21, 0x21 },
	{ 0x3F, 0x3F, 0x3F, 0x21, 0x21 },
	{ 0x3F, 0x3F, 0x3F, 0x3F, 0x21 },
	{ 0x3F, 0x3F, 0x3F, 0x3F, 0x3F },//143
	{ 0x21, 0x21, 0x21, 0x3F, 0x0C },
	{ 0x3F, 0x21, 0x21, 0x3F, 0x0C },
	{ 0x3F, 0x3F, 0x21, 0x3F, 0x0C },
	{ 0x3F, 0x3F, 0x3F, 0x3F, 0x0C },//bat end 147
        { 0x00, 0x40, 0x00, 0x40, 0x00 },//‰‚Â ÚÓ˜ÍË 148
};
//---------------------------------------
/*
//const unsigned char deg_12x16[11][24] = {
const unsigned char deg12x16[11][24] = {
// 0x30 - '0'.
  {0x00, 0xF8, 0xFE, 0x06, 0x03, 0x03, 0x03, 0x03, 0x03, 0x06, 0xFE, 0xF8,
  0x00, 0x07, 0x1F, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x1F, 0x07},

  // 0x31 - '1'.
  {0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0e, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x3f, 0x3f, 0x30, 0x30, 0x30, 0x00},

  // 0x32 - '2'.
  {0x00, 0x1c, 0x1e, 0x07, 0x03, 0x03, 0x83, 0xc3, 0xe3, 0x77, 0x3e, 0x1c,
  0x00, 0x30, 0x38, 0x3c, 0x3e, 0x37, 0x33, 0x31, 0x30, 0x30, 0x30, 0x30},

  // 0x33 - '3'.
  {0x00, 0x0c, 0x0e, 0x07, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xe7, 0x7e, 0x3c,
  0x00, 0x0c, 0x1c, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x1f, 0x0e},

  // 0x34 - '4'.
  {0x00, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xff, 0xff, 0x00, 0x00,
  0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x3f, 0x3f, 0x03, 0x03},

  // 0x35 - '5'.
  {0x00, 0x3f, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0xe3, 0xc3, 0x83,
  0x00, 0x0c, 0x1c, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x1f, 0x0f},

  // 0x36 - '6'.
  {0x00, 0xc0, 0xf0, 0xf8, 0xdc, 0xce, 0xc7, 0xc3, 0xc3, 0xc3, 0x80, 0x00,
  0x00, 0x0f, 0x1f, 0x39, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x1f, 0x0f},

  // 0x37 - '7'.
  {0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xc3, 0xf3, 0x3f, 0x0f, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x3c, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00},

  // 0x38 - '8'.
  {0x00, 0x00, 0xbc, 0xfe, 0xe7, 0xc3, 0xc3, 0xc3, 0xe7, 0xfe, 0xbc, 0x00,
  0x00, 0x0f, 0x1f, 0x39, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x1f, 0x0f},

  // 0x39 - '9'.
  {0x00, 0x3c, 0x7e, 0xe7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xe7, 0xfe, 0xfc,
  0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x38, 0x1c, 0x0e, 0x07, 0x03, 0x00},
  // 0x3a - –¥–≤–æ–µ—Ç–æ—á–∏–µ.
  {0xe0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x61, 0x71, 0x3f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  //1     2     3     4     5    6      7     8     9     10    11    12
  };   */
//--------------------------------------------------------------------------
//  ÔÓÔ˚ÚÍ‡ ÔÓ„‡ÏÏÌÓ-‡ÔÔ‡‡ÚÌÓ„Ó SPI
//
/*
  void SPIsendLCD(unsigned char byte, unsigned char dord) //‡ÔÔ‡‡ÚÌ˚È SPI
 {
     SPCR = (1 << SPE) | (1 << MSTR)|(1<<SPR1)  | (1<<SPR0);
    if (dord == 1) SPCR |= (1 << DORD);//LSB first
    SPSR = (0 << SPI2X);// 1=> speed = 4MHz

    SPDR = byte;
    while(!(SPSR & (1 << SPIF)));
    SPCR = 0x00; //off SPI module
    }   */
//--------------------------------------------------------------------------
// init LCD
//void lcd_init(void)
void LCD_init(void) // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–ò–°–ü–õ–ï–Ø  //  ++++++++++++++++++++++++++
{
//unsigned char tmp;
//tmp = 1<<cs;         //cs = 1;
//LCD_PORT &= tmp;
//tmp = 1 << rst;      //rst = 0;
//LCD_PORT &= ~ tmp;
//delay_ms(50);        // 5mS so says the stop watch(less than 5ms will not work)
//tmp = 1<<rst;
//LCD_PORT |= tmp;     //rst = 1;
//lcd_write(CMD,0x20); // write VOP register
lcd_write(CMD,0xE2);
delay_ms(500);
lcd_write(CMD,0x22); // write VOP register   NEW  3 - 5 V VDD&VDDI
//lcd_write(CMD,0x90);   //0x9f  for    8 Pin Display
lcd_write(CMD,0x89);   //0x9f  for    9 Pin Display , for 3 V - 0x89
lcd_write(CMD,0xA4); // all on/normal display
lcd_write(CMD,0x2F); // Power control set(charge pump on/off)
lcd_write(CMD,0x40); // set start row address = 0
lcd_write(CMD,0xb0); // set Y-address = 0
lcd_write(CMD,0x10); // set X-address, upper 3 bits
lcd_write(CMD,0x00);  // set X-address, lower 4 bits
if (disp == 0)
{
lcd_write(CMD,0xC8); // mirror Y axis (about X axis)
lcd_write(CMD,0xa1); // Invert screen in horizontal axis a1-normal,a9-revers
}
else lcd_write(CMD,0xa9);
lcd_write(CMD,0xac); // set initial row (R0) of the display
lcd_write(CMD,0x07);
lcd_write(CMD,0xaf); // display ON/OFF
//lcd_clear();         // clear LCD
delay_ms(20);
LCD_clear_all();
delay_ms(20);
//lcd_write(CMD,0xa7); // invert display
//delay_ms(500);       //1/2 sec delay
//lcd_write(CMD,0xa6); // normal display (non inverted )
//delay_ms(500);
}


//--------------------------------------------------------------------------------
/*void LCD_clear (void)

{
unsigned char x, y;

for (y=0; y<8; y++)     for (x=0; x<96; x++) buff[y][x]=0;
//for (y=0; y<7; y++)     for (x=0; x<96; x++) buff[y][x]=0;

}
  */
// clear LCD
void LCD_clear_all (void)

{
unsigned char x, y;

unsigned int i;
lcd_write(CMD,0x40); // Y = 0
lcd_write(CMD,0xb0);
lcd_write(CMD,0x10); // X = 0
lcd_write(CMD,0x00);
lcd_write(CMD,0xae); // disable display;
for(i=0;i<864;i++) lcd_write(DATA,0x00);
lcd_write(CMD,0xaf); // enable display;

/*
for (y=0; y<8; y++)     for (x=0; x<96; x++) buff[y][x]=0;
//for (y=0; y<7; y++)     for (x=0; x<96; x++) buff[y][x]=0;
  */
}
//--------------------------------------------------------------------------------

void lcd_write(char cd,unsigned char c)
{
   char i;
   unsigned char tmp;
   _INT_OFF;
   _LCD_LATCH = 0;
   tmp = 1<<sclk;
   LCD_PORT &= ~tmp; //sclk = 0;
   if (cd)  {LCD_PORT |= 1 << sda} //sda = cd;
   else     {tmp = 1<<sda;
          LCD_PORT &= ~tmp;};
   LCD_PORT |= 0x01 << sclk; //sclk = 1;

   for(i=0;i<8;i++)
   {      tmp = 1<<sclk;
	  LCD_PORT &= ~tmp; //sclk = 0;
      	  tmp = 1<<sda;
 //-----------------------------------------
	  if(c & 0x80)
	        LCD_PORT |= tmp; //sda = 1;
	  else
		LCD_PORT &= ~tmp; //sda = 0;
      	  LCD_PORT |= 0x01 << sclk; //sclk = 1;
      	  c <<= 1;
	  //delay_us(20); //Delay10TCYx(20);
      //delay_us(1); //Delay10TCYx(20);   // New !!!!!!  –†–∞–±–æ—Ç–∞–µ—Ç!!!
	  } //end for
          tmp = 1<<sclk;
	  LCD_PORT &= ~tmp; //sclk = 0;
 //---------------------------------------------
   //       SPIsendLCD(c,0);
   //        delay_us(1);
   //      LCD_PORT &= ~tmp;
   //       }
 //--------------------------------------------------
           _LCD_LATCH = 1;
           delay_us(10);
           _INT_ON;


           } //end function lcd_write()



//------------------------------------------------------ –æ–¥–∏–Ω–∞–∫–æ–≤–æ
/*void LCD_pixel (unsigned char x, unsigned char y, unsigned char color)
{   // –†–∏—Å—É–µ–º –ø–∏–∫—Å–µ–ª—å. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ –Ω–µ–µ
unsigned char i, bt;
i=y>>3;
bt=1<<(y & 0x7);
if(color) buff[i][x]|=bt;
else buff[i][x]&=(~bt);
}*/
//------------------------------------------------------
//------------------------------------------------------
flash const unsigned char deg12x16[][24] = {
// 0x30 - '0'.
  {0x00, 0xF8, 0xFE, 0x06, 0x03, 0x03, 0x03, 0x03, 0x03, 0x06, 0xFE, 0xF8,
  0x00, 0x07, 0x1F, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x1F, 0x07},
// 0x31 - '1'.
  {0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0e, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x3f, 0x3f, 0x30, 0x30, 0x30, 0x00},
// 0x32 - '2'.
  {0x00, 0x1c, 0x1e, 0x07, 0x03, 0x03, 0x83, 0xc3, 0xe3, 0x77, 0x3e, 0x1c,
  0x00, 0x30, 0x38, 0x3c, 0x3e, 0x37, 0x33, 0x31, 0x30, 0x30, 0x30, 0x30},
// 0x33 - '3'.
  {0x00, 0x0c, 0x0e, 0x07, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xe7, 0x7e, 0x3c,
  0x00, 0x0c, 0x1c, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x1f, 0x0e},
// 0x34 - '4'.
  {0x00, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xff, 0xff, 0x00, 0x00,
  0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x3f, 0x3f, 0x03, 0x03},
// 0x35 - '5'.
  {0x00, 0x3f, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0xe3, 0xc3, 0x83,
  0x00, 0x0c, 0x1c, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x1f, 0x0f},
// 0x36 - '6'.
  {0x00, 0xc0, 0xf0, 0xf8, 0xdc, 0xce, 0xc7, 0xc3, 0xc3, 0xc3, 0x80, 0x00,
  0x00, 0x0f, 0x1f, 0x39, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x1f, 0x0f},
// 0x37 - '7'.
  {0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xc3, 0xf3, 0x3f, 0x0f, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x3c, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00},
// 0x38 - '8'.
  {0x00, 0x00, 0xbc, 0xfe, 0xe7, 0xc3, 0xc3, 0xc3, 0xe7, 0xfe, 0xbc, 0x00,
  0x00, 0x0f, 0x1f, 0x39, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x1f, 0x0f},
// 0x39 - '9'.
  {0x00, 0x3c, 0x7e, 0xe7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xe7, 0xfe, 0xfc,
  0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x38, 0x1c, 0x0e, 0x07, 0x03, 0x00},
// 0x3a - ‰‚ÓÂÚÓ˜ËÂ.
  {0x00, 0x00, 0x00, 0x00, 0x70, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1c, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00},
//ÚÓ˜Í‡
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1c, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00},
//
  {0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00,
   0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00},
  };

////////////////////////////////////////////////////////////////////////////////////////   FontLookup

// –ù–∏–∂–µ –æ—Ç 1100.lib
/*
void setx(char x)
{
lcd_write(CMD,0x10 | ((x>>4)&0x7));
lcd_write(CMD,x & 0x0f);
}

void sety(char y)
{char aux = 0;
 while(y>7)
  {y -=8;
   aux ++;
	}

bitaddr = y-1;
lcd_write(CMD,0xB0 | (aux & 0x0f));
}
 */
void gotoxy(char x,char y)
{
lcd_write(CMD,(0xB0|(y&0x0F)));		 // Y axis initialisation: 0100 yyyy
lcd_write(CMD,(0x00|(x&0x0F)));		 // X axis initialisation: 0000 xxxx ( x3 x2 x1 x0)
//lcd_write(CMD,(0x10|((x>>4)&0x07))); // X axis initialisation: 0010 0xxx  ( x6 x5 x4)
lcd_write(CMD,(0x10|(x>>4)));
}

//x dir >    y dir from last line to ^
/*void vline(char x,char y,char on)
{
	char aux[8];
	char i;

	for(i=0;i<8;i++)
		aux[i] = 0;

	i = 7;
	while(y > 9){
		aux[i] = 0xff;
		y -= 8;
		i--;
	}

	while(y > 0){
		aux[i] >>= 1;
		aux[i] |= 0x80;
		y --;
	}



	for(y=0;y<8;y++){
		lcd_write(CMD,0xB0 | y);
		setx(x);
		lcd_write(DATA,aux[y]);
	}

}*/

// xdir is >       y is always < than y2  can be used for graphs
/*void line(unsigned char x,unsigned char y,unsigned char y2,unsigned char on)
{
	char aux[8];
	char i,o;
	char c=1;
	char index;



	for(i=0;i<8;i++)
		aux[i] = 0;


	index = 0;
	for(i=0;i<64;i++){

		if(i >= y && i <= y2){
			aux[index] |= c << o;
		}

		o ++;
		if(o == 8){
			o = 0;
			index ++;
		}
	}


	for(i=0;i<8;i++){
		lcd_write(CMD,0xB0 | i);
		setx(x);
		lcd_write(DATA,aux[i]);
	}


}*/

void print_char(char c)
{
	unsigned char i;

        	for ( i = 0; i < 5; i++ ){
				lcd_write(DATA,FontLookup[c - 32][i] << 1);
        }
			lcd_write(DATA,0x00);

}

void char_12_16(char c,char x, char y)
{
    unsigned char i;
    gotoxy(x,y);
    for ( i = 0; i < 12; i++ )
            {
				lcd_write(DATA,deg12x16[c][i]);
            }
    gotoxy(x,y+1);
    for ( i = 12; i < 24; i++ )
            {
				lcd_write(DATA,deg12x16[c][i]);
            }


}

/*void char_24_32(char c,char x, char y)
{
    unsigned char i;
    gotoxy(x,y);
    for ( i = 0; i < 24; i++ )
            {
				lcd_write(DATA,deg24x32[c][i]);
            }
    gotoxy(x,y+1);
    for ( i = 24; i < 48; i++ )
            {
				lcd_write(DATA,deg24x32[c][i]);
            }
    gotoxy(x,y+2);
    for ( i = 48; i < 72; i++ )
            {
				lcd_write(DATA,deg24x32[c][i]);
            }
    gotoxy(x,y+3);
    for ( i = 72; i < 96; i++ )
            {
				lcd_write(DATA,deg24x32[c][i]);
            }

}*/


/*void print_message(flash char * message){	// Write message to LCD (C string type)
//lcd_write(CMD,0xae); // disable display;    // —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —ç—Ç–æ–≥–æ !
		while (*message){			// Look for end of string
					print_char(*message++);
					}
//	lcd_write(CMD,0xaf); // enable display;  // —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —ç—Ç–æ–≥–æ !
						}*/
void print_message(flash char * message){	// Write message to LCD (C string type)
//lcd_write(CMD,0xae); // disable display;    // ‡·ÓÚ‡ÂÚ ·ÂÁ ˝ÚÓ„Ó !
		while (*message){			// Look for end of string
					print_char(*message++);
					}
//	lcd_write(CMD,0xaf); // enable display;  // ‡·ÓÚ‡ÂÚ ·ÂÁ ˝ÚÓ„Ó !
						}
void print_string(char * message){	// Write message to LCD (C string type)
//lcd_write(CMD,0xae); // disable display;
		while (*message){			// Look for end of string
					print_char(*message++);

                			}
	//lcd_write(CMD,0xaf); // enable display;
						}
